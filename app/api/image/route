// app/api/image/route.ts
// Fallback endpoint: expects form-data with workId + file
export const dynamic = "force-dynamic";

import { getSupabaseServer } from "@/lib/supabaseServer";
import supabaseAdmin from "@/lib/supabaseAdmin";

export async function POST(req: Request) {
  try {
    const form = await req.formData();
    const id = String(form.get("workId") ?? form.get("id") ?? "");
    const file = form.get("file");

    if (!id)  return Response.json({ ok: false, stage: "input", error: "workId missing" }, { status: 400 });
    if (!(file instanceof File)) return Response.json({ ok: false, stage: "input", error: "file missing" }, { status: 400 });

    const ext = (file.name.split(".").pop() || "jpg").toLowerCase();
    const path = `works/${id}/${Date.now()}.${ext}`;

    const { error: upErr } = await supabaseAdmin.storage.from("works").upload(path, file, {
      upsert: false,
      contentType: file.type || "image/jpeg",
    });
    if (upErr) return Response.json({ ok: false, stage: "upload", error: upErr.message }, { status: 500 });

    const { data: pub } = await supabaseAdmin.storage.from("works").getPublicUrl(path);
    const image_url = pub?.publicUrl;

    const supabase = await getSupabaseServer();
    const { error: updErr } = await supabase.from("works").update({ image_url }).eq("id", id).limit(1);
    if (updErr) return Response.json({ ok: false, stage: "update", error: updErr.message }, { status: 403 });

    return Response.json({ ok: true, id, image_url });
  } catch (e: any) {
    return Response.json({ ok: false, stage: "exception", error: String(e?.message || e) }, { status: 500 });
  }
}
